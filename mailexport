#!/usr/bin/env osascript -l JavaScript

ObjC.import("stdio");


function main(...args) {
	let copyToPasteboard = false;
	if(args.indexOf("--copy") >= 0) {
		copyToPasteboard = true
	}

	let exportAttachments = false;
	if(args.indexOf("--attachments") >= 0) {
		exportAttachments = true;
		$.printf("%s\n", "WARNING: Exporting mail attachments is not fully implemented yet.");
	}

	let app = Application("com.apple.mail");

	let result = "";

	for(let mw of app.messageViewers() || []) {
		for(let m of mw.selectedMessages() || []) {
			if(exportAttachments) {
				let rootFolderName = dateToShortStr(m.dateSent()) + " " + sanitizeForFilename(m.subject());
				let rootFolderPath = "";
				{
					let currentApp = Application.currentApplication();
					currentApp.includeStandardAdditions = true;
					let destFolder = currentApp.chooseFolder({
						withPropmpt: "Choose destination folder"
					});
					rootFolderPath = destFolder.toString() + "/" + rootFolderName;
				}
				result += rootFolderPath + "\n";
				result += rootFolderPath + "/" + "email.eml" + "\n";
				for(let a of m.mailAttachments()) {
					result += rootFolderPath + "/" + "attachments" + "/" + a.name() + "\n";
				}
			} else {
				let title = `-\tüì´ ${parseAddress(m.sender())[0]} üïê ${dateToStr(m.dateSent())} üìù ${m.subject().trim()}`;

				let bodyLines = [];
				bodyLines.push("message://" + encodeURI(`<${m.messageId()}>`));
				bodyLines.push("Mailbox:\t\t" + mailboxToStr(m.mailbox()));
				bodyLines.push("Date Sent:\t\t" + m.dateSent());
				bodyLines.push("Date Received:\t" + m.dateReceived());
				bodyLines.push(`From:\t\t${m.sender()}`);
				for(let [kind, recipients] of [
					["To:\t\t\t", m.toRecipients()],
					["CC:\t\t\t", m.ccRecipients()],
					["BCC:\t\t\t", m.bccRecipients()],
				]) {
					if(!recipients.length) {
						continue;
					}
					recipients = recipients.map(r => r.name() ? `${r.name()} <${r.address()}>` : r.address());
					bodyLines.push(`${kind}${recipients.join(", ")}`);
				}
				bodyLines.push(`Subject:\t\t${m.subject()}`);

				result += `${title}\n\t${bodyLines.join("\n\t")}\n\n`;
			}
		}
	}

	$.printf("%s", result);

	if(copyToPasteboard) {
		app.includeStandardAdditions = true;
		app.setTheClipboardTo(result);
	}
}


function sanitizeForFilename(s) {
	return s.replace(/[:/]/g, "_");
}


function mailboxToStr(m) {
	// No better way was discovered to detect that "m" does not have a container.
	try {
		return mailboxToStr(m.container()) + "/" + m.name();
	} catch(e) {
		return `[${m.name()}]`;
	}
}


function parseAddress(a) {
	let m = a.match(/^(.*)<([^>]+)>/);
	if(!m) {
		return [a, null];
	} else {
		return [m[1].trim(), m[2].trim()];
	}
}


function dateToStr(d) {
	var month = zpadStrInt(d.getMonth() + 1, 2);
	var date = zpadStrInt(d.getDate(), 2);
	var hours = zpadStrInt(d.getHours(), 2);
	var minutes = zpadStrInt(d.getMinutes(), 2);
	var seconds = zpadStrInt(d.getSeconds(), 2);
	return `${d.getFullYear()}-${month}-${date} ${hours}:${minutes}:${seconds} ${tzStr(d)}`;
}


function dateToShortStr(d) {
	var month = zpadStrInt(d.getMonth() + 1, 2);
	var date = zpadStrInt(d.getDate(), 2);
	var hours = zpadStrInt(d.getHours(), 2);
	var minutes = zpadStrInt(d.getMinutes(), 2);
	var seconds = zpadStrInt(d.getSeconds(), 2);
	return `${d.getFullYear()}${month}${date}T${hours}${minutes}${seconds}${tzStr(d)}`;
}


function tzStr(d) {
	var x = d.getTimezoneOffset();
	var totalMinutes = Math.abs(x);
	var minutes = totalMinutes % 60;
	var hours = (totalMinutes - minutes) / 60;
	var absStr = `${zpadStrInt(hours, 2)}${zpadStrInt(minutes, 2)}`;
	return (x > 0 ? "-" : "+") + absStr;
}


function zpadStrInt(i, n) {
	var s = `${i}`;
	if(n < s.length)
		return s;
	return "0".repeat(n - s.length) + s;
}


function run(args) {
	return main(...args);
}
