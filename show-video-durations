#!/usr/bin/env python3

"""
Usage:
	{prog} [options] [PATHS...]

Options:
	--jobs, -j NUMBER           Maximum parallel jobs.
	                            [default: 25]
	--playback-rate, -r NUMBER  Calculate duration as if played at specified rate.
	                            [default: 1.0]
	--ffprobe-path PATH         Path to ffprobe executable to be used.
	                            [default: ffprobe]
	--cache-path PATH           Path to file containing cached durations from previous runs.
	--chdir, -C PATH            Change current folder to specified path before doing anything else.
"""

import sys, locale, asyncio, subprocess, os, collections, re
# pip install docopt==0.6.2
import docopt


async def main(*, args, prog):
	locale.setlocale(locale.LC_ALL, "")

	params = docopt.docopt(
		__doc__.replace("\t", " " * 4).format(prog=os.path.basename(prog)),
		argv=args,
		help=True,
		version=True,
		options_first=False
	)
	paths = params.pop("PATHS")
	max_parallel_jobs = int(params.pop("--jobs"))
	playback_rate = float(params.pop("--playback-rate"))
	ffprobe_path = params.pop("--ffprobe-path")
	cache_path = params.pop("--cache-path")
	chdir_path = params.pop("--chdir")
	assert not cache_path, "--cache-path is not implemented"
	assert not params, params

	os.chdir(chdir_path)

	log = asyncio.Queue()
	pending_tasks = []
	printer_task = asyncio.ensure_future(
		printer(queue=log, fo=sys.stdout)
	)

	if not paths:
		paths = ["."]

	pending_durations = asyncio.Queue()

	class PathDuration(object):
		def __init__(self):
			self.duration = 0
			self.count = 0
			self.remaining = 0

	path_durations = collections.OrderedDict()
	files_failed = collections.OrderedDict()

	async def duration_consumer():
		nonlocal path_durations, files_failed
		await log.put("\n")
		while True:
			pfd = await pending_durations.get()
			if pfd is not None:
				the_path, the_file, the_duration = pfd
				file_dir = os.path.dirname(the_file)
				clear = f"\x1b[{len(path_durations)}F\x1b[0J"

				if isinstance(the_duration, Exception):
					files_failed[the_file] = the_duration
					path_durations[file_dir].remaining -= 1
				else:
					if file_dir not in path_durations:
						path_durations[file_dir] = PathDuration()

					if the_duration == 0:
						path_durations[file_dir].count += 1
						path_durations[file_dir].remaining += 1
					else:
						path_durations[file_dir].remaining -= 1
						path_durations[file_dir].duration += the_duration

					duration_tuples = list(path_durations.items())
					duration_tuples.sort(key=(lambda k: (k[1].duration, k[1].count)))
					await log.put(
						clear +
						"".join(f"{format_seconds(d.duration, speed=playback_rate)} {d.count:>3} {format_remaining(d.remaining)}{os.path.normpath(p)}\n" for p, d in duration_tuples)
					)

				pending_durations.task_done()
			else:
				break
		await log.put(f"Total: {format_seconds(sum(d.duration for d in path_durations.values()), speed=playback_rate)}\n")
		if files_failed:
			await log.put(f"{files_failed}\n")


	pending_tasks.append(
		asyncio.ensure_future(duration_consumer())
	)
	pending_paths = asyncio.Queue()
	pending_tasks.append(
		asyncio.ensure_future(path_consumer(
			queue_in=pending_paths,
			queue_out=pending_durations,
			max_parallel=max_parallel_jobs,
			ffprobe_path=ffprobe_path,
		))
	)
	await walker(paths=paths, queue=pending_paths)

	await pending_paths.join()
	await pending_durations.join()

	await asyncio.gather(*pending_tasks)
	#current_task = asyncio.current_task()
	#all_tasks = asyncio.all_tasks()
	#assert {current_task, printer_task} == all_tasks, (current_task, all_tasks)

	await log.put(None)
	await printer_task


async def path_consumer(*, queue_in, queue_out, max_parallel, ffprobe_path):
	async def do_one(p, f):
		try:
			d = await get_video_file_duration(f, ffprobe_path=ffprobe_path)
		except Exception as e:
			d = e
		await queue_out.put((p, f, d))
		queue_in.task_done()


	incoming = []
	pending = set()

	expect_more = True
	while pending or expect_more:
		if expect_more:
			pf = await queue_in.get()
			if pf is not None:
				incoming.append(pf)
				await queue_out.put((*pf, 0))
				await asyncio.sleep(0)
			else:
				queue_in.task_done()
				expect_more = False

		num_to_add = max(0, max_parallel - len(pending))
		if num_to_add:
			pending.update(
				asyncio.ensure_future(do_one(*pf)) for pf in incoming[:num_to_add]
			)
			incoming = incoming[num_to_add:]

		if pending:
			done, pending = await asyncio.wait(pending, return_when=asyncio.FIRST_COMPLETED, timeout=(0 if expect_more else None))

	await queue_out.put(None)


async def walker(*, paths, queue):
	async for p in walk_paths(*paths):
		await queue.put(p)
	await queue.put(None)


DEFAULT_IGNORED_FILES = [
	r"(\._)?\.DS_Store",
	r"(\._)?(favorite|folder)(-atv)?\.(jpg|png)",
	r".*\.empty\.mp4",
]


DEFAULT_IGNORED_DIRS = [
	r"\.meta",
	r"\.routes",
]


async def walk_paths(*paths, ignored_files=DEFAULT_IGNORED_FILES, ignored_dirs=DEFAULT_IGNORED_DIRS):
	ignored_files = re.compile("|".join(f"({x})" for x in ignored_files))
	ignored_dirs  = re.compile("|".join(f"({x})" for x in ignored_dirs))
	paths = list(paths)
	while paths:
		p = paths.pop(0)
		if not os.path.isdir(p):
			if ignored_files.fullmatch(p) is not None:
				continue
			yield (p, p)
		else:
			if ignored_dirs.fullmatch(p) is not None:
				continue
			for rootdir, dirs, files in os.walk(p, topdown=True):
				dirs[:] = [d for d in dirs if ignored_dirs.fullmatch(d) is None]
				for f in files:
					if ignored_files.fullmatch(f) is not None:
						continue
					yield (p, os.path.join(rootdir, f))


async def get_video_file_duration(video_file_path, *, ffprobe_path):
	p = await asyncio.create_subprocess_exec(
		ffprobe_path, "-v", "error", "-show_entries", "format=duration", "-of", "default=noprint_wrappers=1:nokey=1", video_file_path,
		shell=False,
		stdout=subprocess.PIPE,
		stderr=subprocess.PIPE,
	)
	await p.wait()
	assert p.returncode == 0, (p.returncode, (await p.stderr.read()).decode("UTF-8"))
	#TODO:vruyr:bugs How do we know it's UTF-8.
	return float((await p.stdout.read()).decode("UTF-8"))


def format_seconds(seconds, *, subsecond=False, speed=1.0):
	seconds = seconds / speed
	assert subsecond == False
	seconds, subseconds = divmod(seconds, 1)
	minutes, seconds = divmod(int(seconds), 60)
	hours, minutes = divmod(minutes, 60)
	result = ""
	if hours:
		result += f"{hours:>3}h"
	else:
		result += "    "
	if result or minutes:
		if result:
			result += " "
		result += f"{minutes:>2}m"
	if result or seconds:
		if result:
			result += " "
		result += f"{seconds:>2}s"
	return result


def format_remaining(r, *, min_width=3, padding_right=" "):
	return f"{(r):>{min_width}}{padding_right}" if r else ""


async def printer(*, queue, fo):
	while True:
		item = await queue.get()
		if item is None:
			break
		if isinstance(item, (list, tuple)):
			print(*item, file=fo, sep="", end="")
		else:
			print(item, file=fo, sep="", end="")


def smain(argv=None):
	if argv is None:
		argv = sys.argv

	try:
		if sys.platform == "win32":
			asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

		return asyncio.get_event_loop().run_until_complete(
			main(
				args=argv[1:],
				prog=argv[0]
			)
		)
	except KeyboardInterrupt:
		print(file=sys.stderr)


if __name__ == "__main__":
	sys.exit(smain())
