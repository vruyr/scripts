#!/usr/bin/env python3

import argparse, shutil, string


def main(argv=None):
	opts = _parse_args(argv)

	genp = genpin if opts.type == "pin" else genpassword

	# https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator#Special_designs
	with open("/dev/random", "rb") as fo:
		passcodes = [genp(fo, opts.length) for i in range(opts.number)]
		per_line = (opts.width + 1) // (opts.length + 1)
		while passcodes:
			print(" ".join(passcodes[:per_line]))
			passcodes = passcodes[per_line:]


def genpin(fo, length):
	pin = int.from_bytes(fo.read(length), "little", signed=False) % (10 ** length)
	pin = ("{:0%s}" % length).format(pin)
	return pin


def genpassword(fo, length):
	alphabet = "".join([
		string.ascii_lowercase,
		string.ascii_uppercase,
		string.digits,
		# string.punctuation.encode("ascii").translate(None, b"'\"").decode("ascii"),
	])
	assert len(alphabet) <= 255

	return "".join(alphabet[x % len(alphabet)] for x in fo.read(length))


def _parse_args(argv=None):
	parser = argparse.ArgumentParser(prog=(argv[0] if argv is not None else None))
	parser.add_argument(
		"--type", "-t",
		choices=["pin", "password"],
		default="pin"
	)
	parser.add_argument(
		"--number", "-n",
		action="store",
		type=int,
		metavar="N",
		default=None,
		help="how many PINs to generate"
	)
	parser.add_argument(
		"--length", "-l",
		action="store",
		type=int,
		metavar="N",
		default=None,
		help="how many digits in each PIN"
	)
	parser.add_argument(
		"--width", "-w",
		action="store",
		type=int,
		metavar="N",
		default=None,
		help="print no more than specified chars per line"
	)
	opts = parser.parse_args(argv[1:] if argv is not None else None)

	if opts.length is None:
		opts.length = 6 if opts.type == "pin" else 32

	screen_size = shutil.get_terminal_size()

	if opts.width is None:
		opts.width = screen_size.columns

	if opts.width < opts.length:
		parser.error("width can not be less than length")

	if opts.number is None:
		per_line = (opts.width + 1) // (opts.length + 1)
		opts.number = (screen_size.lines - 2) * per_line
		if opts.number % per_line:
			opts.number = opts.number + per_line - opts.number % per_line

	return opts


if __name__ == '__main__':
	main()
