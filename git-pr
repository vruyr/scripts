#!/usr/bin/env bash

set -o errexit
trap "declare -p BASH_COMMAND; echo FAILED" ERR


pr_num="$1"; shift


printf '\n'

gh pr view --comments "$pr_num" || true
printf '\n\n'
printf '%*s\n' "$(tput cols)" '' | tr ' ' '-'
printf '\n\n'


gh pr checks "$pr_num" || true
printf '\n\n'
printf '%*s\n' "$(tput cols)" '' | tr ' ' '-'
printf '\n\n'


IFS=$'\t' read pr_url base_url base_label base_sha head_label head_sha < <( \
	gh api "repos/:owner/:repo/pulls/$pr_num" \
	--jq '.html_url + "\t" + .base.repo.clone_url + "\t" + .base.label + "\t" + .base.sha + "\t" + .head.label + "\t" + .head.sha' \
)

#TODO:vruyr Set HEAD branch pr/1000/review instead of detaching it.
#TODO:vruyr Print instructions on how to update the PR branches.

#TODO:vruyr Instead of using $base_sha for the review branch, use the last review point, if any and increment the number.
echo "# 1: Fetch PR branches"
echo git fetch "$base_url" \\
echo "    $base_sha:refs/heads/pr/${pr_num}/base" \\
echo "    $base_sha:refs/heads/pr/${pr_num}/review1" \\
echo "    $head_sha:refs/heads/pr/${pr_num}/head"
echo

#TODO:vruyr Deduce the ${remote_name} using ${base_label}.
# git branch "pr/${pr_num}/base"     --set-upstream-to="remotes/${remote_name}/${base_label#*:}"
echo "# 2: Set upstreams"
echo git branch "pr/${pr_num}/head"     --set-upstream-to="pr/${pr_num}/base"
echo git branch "pr/${pr_num}/review1"  --set-upstream-to="pr/${pr_num}/head"
echo

printf '!!! MAKE SURE THERE ARE NO LOCAL MODIFICATIONS !!!\n'
echo

echo "# 3: Switch to the base branch"
echo git switch --discard-changes --recurse-submodules "pr/${pr_num}/review1"
echo

echo "# 4: Pull in the changes from the PR branch"
echo git restore --worktree --source "pr/${pr_num}/head" -- .
echo

printf '\n\n'
printf 'Pull Request URL: %s\n' "$pr_url"
printf '\n'

printf '\n\n'
printf 'Stage all changes that look good and run:'
printf '\n'
printf '    git reset --soft %q\n' "pr/${pr_num}/head"
printf '\n\n'

printf '%*s\n' "$(tput cols)" '' | tr ' ' '-'

printf '\n\n'
git branch -lavv  'pr/*' $((git for-each-ref 'refs/remotes/*/HEAD' --format '%(refname)'; echo HEAD) | xargs -n1 git symbolic-ref | sed -E 's.refs/(remotes|heads)/..')
printf '\n\n'

printf '%*s\n' "$(tput cols)" '' | tr ' ' '-'
printf '\n\n'
git status

printf '\n\n'
printf '%*s\n' "$(tput cols)" '' | tr ' ' '-'
printf '\n\n'


(
	echo "gh pr view --web $pr_num"
	echo "git smerge"
	echo "activate-app.swift && vsc ."
) | fzf --reverse --height ~100% --multi | while read -r cmd;
do
	eval "$cmd"
done
