#!/usr/bin/env osascript -l JavaScript

// ObjC.import("stdio");
// $.printf("%s", result);


function main(...args) {
	let params = parseArgs(args, {
		"--prepend-date": parseArgs.flag("prependCreationDate"),
		"--copy"        : parseArgs.flag("copyToPasteboard"),
		"--json"        : parseArgs.flag("writeJson"),
	});

	var result = [];

	var app = Application("OmniFocus");
	var doc = app.defaultDocument();
	var windows = doc.documentWindows();
	for(var i = 0; i < windows.length; i++) {
		var w = windows[i];
		if(!w.document())
			continue;
		var selectedTrees = w.content().selectedTrees;
		for(var ii = 0; ii < selectedTrees.length; ii++) {
			var task = selectedTrees[ii].value();
			let taskStr;
			if(params.writeJson) {
				taskStr = taskToJsonString(task);
			} else {
				taskStr = taskToObsidianText(task);
			}
			result.push(taskStr);
			if(params.prependCreationDate) {
				task.name = dateToStr(task.creationDate()) + " " + task.name();
			}
		}
	}

	/*
	>> Application("OmniFocus").defaultDocument.documentWindows.content.trees.value.projects.tasks.name()
	=> [[[["a task"]], [["A", "Foo bar", "B"]]]]
	*/

	result = result.join("\n");

	// Not including the final newline as `console.log` will always add one.

	console.log(result);

	if(params.copyToPasteboard) {
		app.includeStandardAdditions = true;
		app.setTheClipboardTo(result + "\n");
	}

	return ""; // Returned value will be printed on the console by osascript
}


function parseArgs(args, parsers) {
	let params = {};

	function split(arg) {
		let sep = arg.indexOf("=");
		if(sep < 0) {
			return [arg, null];
		} else {
			return [arg.substr(0, sep), arg.substr(sep + 1)]
		}
	}

	for(let arg of args) {
		let [name, value] = split(arg);
		if(!parsers.hasOwnProperty(name)) {
			throw new Error(`Invalid argument ${JSON.stringify(arg)}`);
		}
		Object.assign(params, parsers[name](name, value, args));
	}

	return params;
}


parseArgs.flag = function(paramName) {
	return function(name, value, args) {
		if(value != null) {
			throw new Error(`The ${name} parameter does not accept a value`);
		}
		return {
			[paramName]: true,
		};
	}
}


function taskToJsonString(task) {
	let result = {
		id: task.id(),
		name: task.name(),
		note: task.note(), //TODO Figure out a way to get the raw rtf with attachments.
		created: dateToStr(task.creationDate()),
		modified: dateToStr(task.modificationDate()),
		deferDate: dateToStr(task.deferDate()),
		dueDate: dateToStr(task.dueDate()),
		completionDate: dateToStr(task.completionDate()),
		completed: task.completed(),
		estimatedMinutes: task.estimatedMinutes(),
	};
	return JSON.stringify(result, null, "\t");
}


function taskToObsidianText(task) {
	var result = [];

	function line(indent, str) {
		result.push([indent, str]);
	}

	let taskName = task.name();
	let creationDate = dateToStr(task.creationDate());
	let modificationDate = dateToStr(task.modificationDate());
	let note = task.note().trim();

	if(/^https?:\/\/\S+$/.test(note)) {
		taskName = `[${taskName}](${note})`;
		note = "";
	}

	let mainLine = `- ${taskName}`;
	mainLine += ` [added::${creationDate}]`;
	if(modificationDate !== creationDate) {
		mainLine += `\t[modified::${modificationDate}]`;
	}

	line(0, mainLine);

	if(note) {
		line(0, note.split("\n").map(x => "\t" + x).join("\n"));
	}

	var indentWidth = 4;
	result = result.map(function(args) {
		return " ".repeat(indentWidth * args[0]) + args[1];
	});

	return result.join("\n");
}


function taskToSectionText(task) {
	var dateStr = dateToShortStr(task.creationDate());
	var taskName = task.name();
	var maxShortTitleLength = 46;
	var shortTitle = taskName.length <= maxShortTitleLength ? taskName : `${taskName.slice(0, maxShortTitleLength - 3)}...`;
	var title = `${dateStr} ${shortTitle}`;
	var headingString = "-".repeat(title.length);
	var firstParagraph = "";
	if(shortTitle != taskName)
		firstParagraph = taskName;
	var note = task.note().trim();

	var result = [];

	result.push(title);
	result.push(headingString);

	result.push("");
	result.push(`Last modified: ${dateToStr(task.modificationDate())}`);

	if(firstParagraph) {
		result.push("");
		result.push(firstParagraph);
	}

	if(note) {
		result.push("");
		result.push(note);
	}

	return result.join("\n") + "\n";
}


function dateToStr(d) {
	if(d == null) {
		return null;
	}
	var month = zpadStrInt(d.getMonth() + 1, 2);
	var date = zpadStrInt(d.getDate(), 2);
	var hours = zpadStrInt(d.getHours(), 2);
	var minutes = zpadStrInt(d.getMinutes(), 2);
	var seconds = zpadStrInt(d.getSeconds(), 2);
	return `${d.getFullYear()}-${month}-${date}T${hours}:${minutes}:${seconds}${tzStr(d)}`;
}


function dateToShortStr(d) {
	var month = zpadStrInt(d.getMonth() + 1, 2);
	var date = zpadStrInt(d.getDate(), 2);
	var hours = zpadStrInt(d.getHours(), 2);
	var minutes = zpadStrInt(d.getMinutes(), 2);
	var seconds = zpadStrInt(d.getSeconds(), 2);
	return `${d.getFullYear()}${month}${date}T${hours}${minutes}${seconds}${tzStr(d)}`;
}


function tzStr(d) {
	var x = d.getTimezoneOffset();
	var totalMinutes = Math.abs(x);
	var minutes = totalMinutes % 60;
	var hours = (totalMinutes - minutes) / 60;
	var absStr = `${zpadStrInt(hours, 2)}:${zpadStrInt(minutes, 2)}`;
	return (x > 0 ? "-" : "+") + absStr;
}


function zpadStrInt(i, n) {
	var s = `${i}`;
	if(n < s.length)
		return s;
	return "0".repeat(n - s.length) + s;
}


function run(args) {
	main(...args);
}
