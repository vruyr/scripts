#!/usr/bin/env python3

"""
Description
"""

import sys, locale, argparse, asyncio, subprocess, re, os
from typing import Any, TextIO


async def main(
	*,
	# Action Options
	check_res: bool,
	format: None | str,
	# Input Options
	filepaths: list[str]
) -> int:
	locale.setlocale(locale.LC_ALL, "")

	log: asyncio.Queue[Any] = asyncio.Queue()
	printer_task = asyncio.create_task(
		printer(queue=log, fo=sys.stdout)
	)

	filename_p = re.compile(r"^.*\.youtube\.(?P<video_id>[^.\s]+)\.[^\.]+$")

	pending_tasks: list[asyncio.Future[None]] = []

	video_ids_to_download: dict[str, str] = {}
	for filepath in filepaths:
		if not (m := filename_p.match(filepath)):
			await log.put("WARNING: File name format is not recognized: {filepath!r}")
			continue
		video_id: str = m.groupdict()["video_id"]

		if check_res:
			res_width, res_height = await get_video_resolution(filepath)

			if res_height == 1440:
				await log.put(f"{res_width}x{res_height} {video_id} SKIPPING: {filepath}")
				continue

			await log.put(f"{res_width}x{res_height} {video_id} DOWNLOAD: {filepath}")
		else:
			await log.put(f"REDOWNLOADING: {filepath}")

		video_ids_to_download[video_id] = filepath

	await log.put("---")
	await log.put(f"Total: {len(video_ids_to_download)} files")

	for video_id, filepath in video_ids_to_download.items():
		await log.put("---")
		await youtube_video_download(video_id, filepath, format=format, log=log)
	await log.put("...")

	await asyncio.gather(*pending_tasks)
	current_task = asyncio.current_task()
	all_tasks = asyncio.all_tasks()
	assert {current_task, printer_task} == all_tasks, (current_task, all_tasks)

	await log.put(None)
	await printer_task

	return 0


async def youtube_video_download(video_id: str, filepath: str, *, format: None | str, log: asyncio.Queue[Any]) -> None:
	if os.stat(filepath).st_size == 0:
		await log.put(f"Unlinking an empty file: {filepath}")
		os.unlink(filepath)
	url = f"https://www.youtube.com/watch?v={video_id}"
	format_args = ["--format", format] if format is not None else []
	p = await asyncio.create_subprocess_exec(
		"yt-dlp", "--force-overwrites", url,
		"--exec", "pre_process:printf 1>&2 'url:%%s\\n' %(original_url)q",
		"--exec", "after_move:printf 1>&2 'filepath:%%s\\n' %(filepath)q",
		*format_args,
		stderr=subprocess.PIPE,
		cwd=os.path.dirname(filepath),
	)
	_, stderr = await p.communicate()
	assert p.returncode == 0, [p.returncode, url, stderr]
	reported_data: dict[str, str] = {}
	for line in stderr.decode("utf-8").splitlines():
		key, sep, val = line.partition(":")
		assert sep == ":", line
		assert len(key) and len(val), line
		reported_data[key] = val
	assert "filepath" in reported_data.keys(), [line, reported_data]
	p = await asyncio.create_subprocess_exec(
		"git", "add", filepath, reported_data["filepath"]
	)
	_1, _2 = await p.communicate()
	assert p.returncode == 0, [os.getcwd(), filepath, reported_data["filepath"]]



async def get_video_resolution(filepath: str) -> tuple[int, int]:
	if os.stat(filepath).st_size == 0:
		return (0, 0)
	p = await asyncio.subprocess.create_subprocess_exec(
		"ffprobe", "-v", "error",
		"-select_streams", "v:0",
		"-show_entries", "stream=width,height",
		"-of", "csv=s=x:p=0",
		filepath,
		stdout=subprocess.PIPE,
	)
	stdout, unused_stderr = await p.communicate()
	assert p.returncode == 0, p
	resolution_str = stdout.decode("UTF-8").rstrip("\n")
	width, sep, height = resolution_str.partition("x")
	assert sep == "x", [resolution_str]
	return (int(width), int(height))



async def printer(*, queue: asyncio.Queue[Any], fo: TextIO) -> None:
	while (item := await queue.get()) is not None:
		if isinstance(item, (list, tuple)):
			print(*item, file=fo, sep="", end="")
		else:
			print(item, file=fo, sep="", end="\n")


def parse_args(*, args: list[str], prog: str) -> dict[str, Any]:
	parser = argparse.ArgumentParser(
		prog=prog,
		usage="%(prog)s [OPTIONS]...",
		description=__doc__,
		formatter_class=argparse.RawTextHelpFormatter,
		fromfile_prefix_chars="@",
		add_help=False,
	)

	the_default = "\ndefault: %(default)s"

	options_generic = parser.add_argument_group("Generic Options")
	options_generic.add_argument(
		"--help", "-h",
		action="help",
		help="show help message and exit",
	)

	options_action = parser.add_argument_group("Action Options")
	options_action.add_argument(
		"--no-check-resolution", "--no-check",
		action="store_false", dest="check_res", default=True,
		help="proceed with downloading without checking existing video resolution" + the_default
	)
	options_action.add_argument(
		"--format",
		action="store", metavar="YTD_FORMAT_EXPR", dest="format", default=None,
		help="passes provided value to underlying `yt-dlp` as `--format=` option"
	)

	options_input = parser.add_argument_group("Input")
	options_input.add_argument("filepaths", metavar="PATH", nargs="+",
		help="video file"
	)

	opts = parser.parse_args(args)
	return vars(opts)


def configure_logging(opts: dict[str, Any]) -> None:
	pass


def smain(argv: list[str] | None = None) -> int:
	if argv is None:
		argv = sys.argv

	try:
		opts = parse_args(args=argv[1:], prog=argv[0])
		configure_logging(opts)

		if sys.platform == "win32":
			asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

		return asyncio.run(
			main(**opts),
			debug=False,
		)
	except KeyboardInterrupt:
		print(file=sys.stderr)
		return 127


if __name__ == "__main__":
	sys.exit(smain())
