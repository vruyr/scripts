#!/usr/bin/env zsh

# Dependencies: yq, gh, jq, git

set -o ERR_EXIT

if [ $# -lt 1 ]; then
	echo "USAGE ${0:t} FILE"
	return 1
fi

file_path="$1:A"
shift 1
file_name="${file_path:t}"

file_content="$(<"$file_path")"
file_content_lines=( "${(@f)file_content}" )

if [ "${file_content_lines[1]}" != "---" ]; then
	echo "The input file doesn't contain frontmatter."
	return 2
fi

file_content_lines=( ${file_content_lines[2,-1]} )

idx="${file_content_lines[(i)---]}"

if [ "$idx" -ge "${#file_content_lines}" ]; then
	echo "The input file doesn't contain frontmatter - no terminator."
	return 2
fi

frontmatter=( ${file_content_lines[1,$idx-1]} )
frontmatter="${(j:\n:)frontmatter}"

upstream="$(echo "$frontmatter" | yq .upstream)"

if [ -z "$upstream" -o "$upstream" = "null" ]; then
	echo "The frontmatter doesn't contain a \"upstream\" key."
	return 3
fi

the_repo="${upstream:h2}"
the_path="${upstream#$the_repo/}"

if [ -z "$the_repo" -o -z "$the_path" ]; then
	echo "The \"upstream\" field in frontmatter is invalid."
	return 4
fi

the_api_url=repos/"$the_repo"/contents/"$the_path"/"$file_name"


file_upstream="$(gh api "$the_api_url" 2>/dev/null || true)"
file_upstream_sha="$(jq <<<"$file_upstream" ".sha" -r)"

if [ "$file_upstream_sha" = 'null' ]; then
	file_upstream_sha=""
fi

file_sha_local="$(git hash-object -t blob "$file_path")"
if [ "$file_sha_local" = "$file_upstream_sha" ]; then
	printf "Up-to-date: "
	jq <<<"$file_upstream" ".html_url" -r
	exit 0
fi

gh_args=(
	-H "Accept: application/vnd.github+json"
	-H "X-GitHub-Api-Version: 2022-11-28"
)

jq <<<0 --rawfile the_input_file "$file_path" --arg sha "$file_upstream_sha" '
	{
		message: "Sync",
		content: ($the_input_file | @base64)
	}
	| if ($sha | length) >= 7 then . += {sha: $sha} end
' - \
	| gh api -X PUT "${gh_args[@]}" --input - --jq .commit.html_url "$the_api_url"
