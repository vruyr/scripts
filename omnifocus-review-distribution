#!/usr/bin/env osascript -l JavaScript

ObjC.import("stdio");


var global = this;


function main(...args) {
	var options = {
		update: {
			flags: ["-u"],
			action: "store_true",
			value: false,
			description: "actually update the project review dates",
		},
		document: {
			flags: ["-d"],
			action: "store",
			value: null,
			description: "name of the document to operate on"
		},
		help: {
			flags: ["-h", "--help"],
			action: "store_true",
			value: false,
			description: "show the help text and exit",
		},
	};
	parseArgs(options, args);

	if(options.help.value) {
		$.printf(`${getHelpText(options)}\n`);
		return;
	}

	var app = Application("OmniFocus");
	var documents = app.documents();

	var documentsByName = {};
	for(var i = 0; i < documents.length; i++) {
		var document = documents[i];
		if(typeof document === "undefined")
			continue;
		var name = document.name();
		if(!documentsByName[name]) {
			documentsByName[name] = [];
		}
		documentsByName[name].push(document);
	}

	function askToChooseDocument() {
		$.printf("Please specify one using -d flag from the following:\n");
		for(var i = 0; i < documents.length; i++) {
			var document = documents[i];
			if(typeof document === "undefined")
				continue;
			$.printf(`\t${document.name()}\n`);
		}

	}

	if(!options.document.value) {
		if(documents.length == 1){
			options.document.value = documents[0].name();
		} else {
			$.printf("OmniFocus has more than one documents available.\n");
			askToChooseDocument();
			return;
		}
	}

	var document = documentsByName[options.document.value];
	if(!document) {
		$.printf(`${JSON.stringify(options.document.value)} is not a valid OmniFocus document name.\n`)
		askToChooseDocument();
		return;
	} else {
		if(document.length === 1) {
			document = document[0]
		} else {
			$.printf(`More than one documents exist with the name ${JSON.stringify(options.document.value)}, rename one of them and try again.`);
			return;
		}
	}

	processDocument(document, options.update.value);

	return; // Returned value will be printed on the console by osascript
}


function processDocument(document, shouldUpdate) {
	var projects = document.flattenedProjects();
	$.printf(`Document ${JSON.stringify(document.name())} has ${projects.length} projects.\n`);

	var openProjects = [];
	var maxProjectNameLen = 0;

	for(var i = 0; i < projects.length; i++) {
		var project = projects[i];
		if(typeof project === "undefined")
			continue;
		if(project.status() === "done")
			continue;
		openProjects.push(project);
		maxProjectNameLen = Math.max(maxProjectNameLen, project.name().length);
	}

	var columnPadding = " | ";
	var projectIndexWidth = `${projects.length.toLocaleString()}`.length;

	$.printf(`Collected ${openProjects.length} open projects.\n`);

	$.printf(`Sorting projects by last review date.\n`);
	openProjects.sort(function(p1, p2) {
		return p1.lastReviewDate() - p2.lastReviewDate();
	});

	var reviewInterval = {unit: "week", steps: 4, fixed: true};

	var numReviewProjectsPerWeek = (Math.floor(openProjects.length / reviewInterval.steps));
	var numReviewProjectsPerWeekLeftover = openProjects.length - (numReviewProjectsPerWeek * reviewInterval.steps);
	var nextReviewDate = new Date();
	nextReviewDate.setHours(0, 0, 0, 0);
	nextReviewDate.setDate(nextReviewDate.getDate() + (6 - nextReviewDate.getDay()) - 7);

	$.printf(`Reviews per week: ${numReviewProjectsPerWeek}\n`);
	$.printf(`Leftover projects: ${numReviewProjectsPerWeekLeftover}\n`);

	$.printf("\n");

	var columns = [
		ljust("#", projectIndexWidth),
		ljust("Project Name", maxProjectNameLen),
		ljust("Last Reviewe Date", 25),
		ljust("Next Review Date", 25),
		ljust("New Next Review Date", 25),
		ljust("Review Interval", 25)
	];
	$.printf(columns.join(columnPadding) + "\n");
	columns = [
		"-".repeat(projectIndexWidth),
		"-".repeat(maxProjectNameLen),
		"-".repeat(25),
		"-".repeat(25),
		"-".repeat(25),
		"-".repeat(25),
	];
	$.printf(columns.join(columnPadding) + "\n");

	function countProjectsPerDay(counts, projectNextReviewDate) {
		if(typeof counts[projectNextReviewDate] === "undefined") {
			counts[projectNextReviewDate] = 0;
		}
		counts[projectNextReviewDate] += 1;
	}

	var projectsOnDateBefore = {};
	var projectsOnDateAfter = {};

	var numProjectsToProcess = 0;
	for(var i = 0; i < openProjects.length; i++) {
		var project = openProjects[i];

		if(!numProjectsToProcess) {
			nextReviewDate.setDate(nextReviewDate.getDate() + 7);
			numProjectsToProcess = numReviewProjectsPerWeek;
			if(numReviewProjectsPerWeekLeftover) {
				numProjectsToProcess += 1;
				numReviewProjectsPerWeekLeftover -= 1;
			}
		}

		numProjectsToProcess -= 1;

		countProjectsPerDay(projectsOnDateBefore, dateToStr(project.nextReviewDate()));
		countProjectsPerDay(projectsOnDateAfter, dateToStr(nextReviewDate));

		var columns = [
			ljust(i.toLocaleString(), projectIndexWidth),
			ljust(project.name(), maxProjectNameLen),
			dateToStr(project.lastReviewDate()),
			dateToStr(project.nextReviewDate()),
			ljust(RepetitionIntervalToString(project.reviewInterval()), 25),
			dateToStr(nextReviewDate),
		];
		$.printf(columns.join(columnPadding) + "\n");

		if(shouldUpdate) {
			project.reviewInterval = reviewInterval;
			project.nextReviewDate = nextReviewDate;
		}
	}

	$.printf("\n");
	$.printf("Before: " + JSON.stringify(projectsOnDateBefore, Object.getOwnPropertyNames(projectsOnDateBefore).sort(), 4) + "\n");
	$.printf("\n");
	$.printf("After: " + JSON.stringify(projectsOnDateAfter, Object.getOwnPropertyNames(projectsOnDateAfter).sort(), 4) + "\n");
	$.printf("\n");
}


function parseArgs(options, args) {
	var i;
	for(var name of Object.getOwnPropertyNames(options)) {
		var option = options[name];
		for(var flag of option.flags) {
			//TODO Invert these two loops
			if((i = args.indexOf(flag)) >= 0) {
				switch(option.action) {
					case "store_true":
						option.value = true;
						args.splice(i, 1);
						break;
					case "store":
						option.value = args[i + 1];
						args.splice(i, 2);
						break;
					default:
						throw new Error("Unrecognized action " + JSON.stringify(option.action));
				}
			}
		}
	}
	if(args.length) {
		throw new Error("Unrecognized options: " + JSON.stringify(args));
	}
}

function getHelpText(options) {
	var text = [];
	for(var name of Object.getOwnPropertyNames(options)) {
		var option = options[name];
		text.push([option.flags.join(", "), option.description]);
	}
	var width = Math.max(...text.map(tuple => tuple[0].length));
	text = text.map(tuple => ljust(tuple[0], width + 4) + tuple[1]).join("\n");
	return text;
}

function ljust(s, len) {
	return s + " ".repeat(len - s.length);
}


function RepetitionIntervalToString(x) {
	return `Every ${x.steps} ${x.unit} (${x.fixed ? "fixed" : "not fixed"})`;
}


function taskToDirectiveText(task) {
	var result = [];

	function line(indent, str) {
		result.push([indent, str]);
	}

	line(0, ".. container:: thoughts");
	line(0, "");

	var taskName = task.name();
	if(taskName) {
		line(1, taskName);
		line(0, "");
	}

	line(1, "Created");
	line(2, dateToStr(task.creationDate()));
	line(1, "Modified");
	line(2, dateToStr(task.modificationDate()));

	var note = task.note().trim();
	if(note) {
		line(0, "");
		line(1, note);
	}

	var indentWidth = 4;
	result = result.map(function(args) {
		return " ".repeat(indentWidth * args[0]) + args[1];
	});

	return result.join("\n") + "\n";
}


function taskToSectionText(task) {
	var dateStr = dateToShortStr(task.creationDate());
	var taskName = task.name();
	var maxShortTitleLength = 46;
	var shortTitle = taskName.length <= maxShortTitleLength ? taskName : `${taskName.slice(0, maxShortTitleLength - 3)}...`;
	var title = `${dateStr} ${shortTitle}`;
	var headingString = "-".repeat(title.length);
	var firstParagraph = "";
	if(shortTitle != taskName)
		firstParagraph = taskName;
	var note = task.note().trim();

	var result = [];

	result.push(title);
	result.push(headingString);

	result.push("");
	result.push(`Last modified: ${dateToStr(task.modificationDate())}`);

	if(firstParagraph) {
		result.push("");
		result.push(firstParagraph);
	}

	if(note) {
		result.push("");
		result.push(note);
	}

	return result.join("\n") + "\n";
}


function dateToStr(d) {
	var month = zpadStrInt(d.getMonth() + 1, 2);
	var date = zpadStrInt(d.getDate(), 2);
	var hours = zpadStrInt(d.getHours(), 2);
	var minutes = zpadStrInt(d.getMinutes(), 2);
	var seconds = zpadStrInt(d.getSeconds(), 2);
	return `${d.getFullYear()}-${month}-${date} ${hours}:${minutes}:${seconds} ${tzStr(d)}`;
}


function dateToShortStr(d) {
	var month = zpadStrInt(d.getMonth() + 1, 2);
	var date = zpadStrInt(d.getDate(), 2);
	var hours = zpadStrInt(d.getHours(), 2);
	var minutes = zpadStrInt(d.getMinutes(), 2);
	var seconds = zpadStrInt(d.getSeconds(), 2);
	return `${d.getFullYear()}${month}${date}T${hours}${minutes}${seconds}${tzStr(d)}`;
}


function tzStr(d) {
	var x = d.getTimezoneOffset();
	var totalMinutes = Math.abs(x);
	var minutes = totalMinutes % 60;
	var hours = (totalMinutes - minutes) / 60;
	var absStr = `${zpadStrInt(hours, 2)}${zpadStrInt(minutes, 2)}`;
	return (x > 0 ? "-" : "+") + absStr;
}


function zpadStrInt(i, n) {
	var s = `${i}`;
	if(n < s.length)
		return s;
	return "0".repeat(n - s.length) + s;
}


function run(args) {
	main(...args);
}
